;Image/pixel scanning class by Spawnova (5/15/22)
;https://github.com/Spawnova/ShinsImageScanClass
;
;General purpose class to scan image data for images and pixels, for ahk_L (not compatible with ahk V2)
;
;Image transparency is not handled in this class, if an image contains pixels that are not fully opaque they are simply ignored;
;which can be used to match images with portions that should be ignored by having those pixels be less than 0xFF000000
;
;I designed this class to be relatively user friendly but still maintain good performance
;I can't promise it will work for every setup, I can only confirm that it works for me on windows 10 (32 and 64 bit)
;
;All returned coordinate positions are dependant on the mode used, desktop uses screen space, client uses client space, otherwise window space

class ShinsImageScanClass {

	;title				:		ahk window title or other type of identifier, leave blank or set to 0 to scan the entire desktop
	;UseClientArea		:		If a window is specified it will use the client area (generally does not include title bar and menus)
	;							Otherwise it will include the entirety of the window, which also includes extra space on the sides
	;							and bottom used for mouse dragging
	__New(title:=0, UseClientArea:=1) {

		this.AutoUpdate 		:= 1 	;when disabled, requires you to call Update() manually to refresh pixel data, useful when you need to scan multiple things on 1 frame

		this.UseControlClick 	:= 0  	;when enabled attempts to use ControlClick to send clicks which works for background programs
										;not all programs will respond to this however, so it may be necessary to use normal clicks which have to be foreground


		;#############################
		;	Setup internal stuff
		;#############################
		if (!DllCall("GetModuleHandle", "str", "gdiplus", "Ptr"))
			DllCall("LoadLibrary", "str", "gdiplus")
		VarSetCapacity(gsi, 24, 0)
		NumPut(1,gsi,0,"uint")
		DllCall("gdiplus\GdiplusStartup", "Ptr*", token, "Ptr", &gsi, "Ptr", 0)
		this.gdiplusToken := token

		this.bits := (a_ptrsize == 8) ;0=32,1=64
		this.desktop := (title = 0 or title = "")
		this.UseClientArea := UseClientArea
		this.imageCache := []

		if (this.desktop)
			coordmode,mouse,screen
		else if (UseClientArea)
			coordmode,mouse,client
		else
			coordmode,mouse,window

		this._ScanImage := this.mcode("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")
		this._ScanImageRegion := this.mcode("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")
		this._ScanImageCount := this.mcode("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")
		this._ScanImageCountRegion := this.mcode("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")
		this._ScanImageArray := this.mcode("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")
		this._ScanImageArrayRegion := this.mcode("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")
		this._ScanPixel := this.mcode("VVdWU4PsHIt0JDCLXCQwi1QkOItMJDQPt34KD7dbCIl8JBCE0g+ExQAAAIX/D4StAAAAD7bCicrHRCQYAAAAAMHqEIlEJAgPtsEPtvLHRCQUAAAAAIk0JA+29Yl0JASJRCQMhdt0YotEJDCLdCQYiwCNLLAxwItMhQCJysH6EA+28is0JInywfofMdYp1g+21StUJAQPtsmJ18H/HzH6Kfo51g9M8itMJAyJz8H/HzH5Kfk5zg9NzjtMJAgPjp4AAACDwAE5w3Wtg0QkFAGLRCQUAVwkGDlEJBB1h410JgC4/////+tSifaNvCcAAAAAi0QkEIXAdOiNBJ0AAAAAMe0x/4kEJIXbdD6LVCQwMcCLMgHu6xGNdgCNvCcAAAAAg8ABOcN0IYsUhoHi////ADnKdezB4BAB+IPEHFteX13DjbQmAAAAAIPHAQMsJDl8JBB1suuKjXYAjbwnAAAAAMHgEANEJBSDxBxbXl9dw5A=|QVdBVkFVQVRVV1ZTSIPsGEQPt1kQRA+3YRJBD7b4RYTAD4S5AAAARYXkD4SoAAAAidXHRCQMAAAAAA+2xkUx/8HtEEGJxkQPtspAD7btRYXbdG9IY0QkDEiLETHbTI0sgkGLVJ0AQYnaidDB+BAPtsAp6EGJwEHB+B9EMcBEKcBBicAPtsYPttJEKfCJxsH+HzHwKfBBOcBBD03ARCnKQYnQQcH4H0QxwkQpwjnQD0zCOfgPjpcAAABIg8MBQTnbf59Bg8cBRAFcJAxFOfwPhXr///8PH0AAuP/////rQ5BFheR08zHbRTH/RYXbdElMiwFIY8NNjRSARTHA6wtmkEmDwAFFOcN+L0eLDIJEicBBgeH///8AQTnRdeTB4BBEAfhIg8QYW15fXUFcQV1BXkFfww8fRAAAQYPHAUQB20U5/HWm65JmLg8fhAAAAAAAQcHiEEONBDrryJCQkJCQkA==")
		this._ScanPixelRegion := this.mcode("VVdWU4PsHIt0JECLRCRIi1wkOItMJDSLVCREiccB84X2eQqLdCQ4iVwkOInzi3QkPAHWiTQkhdJ5C4tUJDyJdCQ8iRQki3QkOIX2D4h4AQAAi1QkPIXSD4hsAQAAi3QkMA+3bgiNVf853YlsJBQPTtoPt1YKOxQkjXL/D080JIk0JITAD4TGAAAAOXQkPA+NtAAAAInID69sJDzB6BAPtsCJRCQED7bFiUQkCIn4D7bAiWwkGIlEJAwPtsGJRCQQOVwkOH1li0QkMIt8JBiLdCQ4iwCNLLiLVLUAidHB+RAPtskrTCQEicjB+B8xwSnBD7bGK0QkCA+20onHwf8fMfgp+DnBD0zIK1QkEInXwf8fMfop+jnRD03RO1QkDA+OlAAAAIPGATnzdayLfCQUg0QkPAEBfCQYiwQkO0QkPA+Fe////412ALj/////60SQOXQkPH3yi3wkPMHlAg+v/TlcJDh9OotUJDCLRCQ4izIB/usLjXQmAIPAATnDdCGLFIaB4v///wA5ynXsweAQA0QkPIPEHFteX13DkI10JgCDRCQ8AYsEJAHvO0QkPHWw65aNtgAAAACLRCQ8weYQg8QcWwHwXl9dw7j9////68M=|QVdBVkFVQVRVV1ZTSIPsGESLlCSAAAAAi5wkkAAAAIuEJIgAAABED7bjR40cAkWF0nkJRYnCRYnYRYnTQo00CIXAeQhEichBifGJxkWFwA+IdQEAAEWFyQ+IbAEAAA+3aRCNRf9EOd1ED07YD7dBEkSNUP858EEPTvKE2w+EzgAAAEE58Q+NtQAAAESJyEGJ1Q+2+ol0JAgPr8VBwe0QiWwkDIn9RQ+27YlEJAQPtsaJxkU52H1vSGNEJARIixFJY9hMjTyCQYsUn0GJ3onQwfgQD7bARCnoQYnCQcH6H0Qx0EQp0EGJwg+2xg+20inwicfB/x8x+Cn4QTnCQQ9NwinqQYnSQcH6H0Qx0kQp0jnQD0zCRDngD46jAAAASIPDAUE523+gi3wkDEGDwQEBfCQERDlMJAgPhXX///8PHwC4/////+tJZg8fhAAAAAAAQTnxfetFicxED6/lRTnYfUdIixlJY8RNY9BIjTyD6wlJg8IBRTnTfi9CixyXRInQgeP///8AOdN15sHgEEQByEiDxBhbXl9dQVxBXUFeQV/DDx+AAAAAAEGDwQFBAexEOc51qOuKZi4PH4QAAAAAAEHB5hBDjQQO68a4/f///+u/kJCQkJCQkJCQkJCQkJCQ")
		this._ScanPixelCount := this.mcode("VVdWU4PsJIt0JDiLVCRAi0wkPA+3XggPt3YKiVwkEIl0JBiE0g+E5QAAAIX2D4RNAQAAD7bCicqNNJ0AAAAAx0QkHAAAAACJRCQIweoQD7bBiXQkIA+28sdEJBQAAAAAiUQkDIl0JAQPtvWJNCQx9otMJBCFyXRyi0QkOItcJByLTCQgiwCNFJ0AAAAAjSwIjRwQAdWNdgCLEw+2zisMJInQD7bSic/B+BDB/x8PtsArRCQEMfkp+YnHwf8fMfgp+DnBD0zIK1QkDInXwf8fMfop+jnRD03RMcA7VCQID57Ag8MEAcY53XWug0QkFAGLTCQQi0QkFAFMJBw5RCQYD4Vr////g8QkifBbXl9dw5CLVCQYhdJ0aInYMe0x/zH2weACiQQkjXYAjbwnAAAAAItEJBCFwHQxi0QkOI0crQAAAACLEI0EGgMUJAHTjXYAixCB4v///wA50Q+UwoPABA+20gHWOcN154PHAQNsJBA5fCQYdbqDxCSJ8FteX13Dg8QkMfZbifBeX13DkJCQkA==|QVdBVkFVQVRVV1ZTSIPsGA+3QRJED7dhEIlEJARJic1BD7bwRYTAD4TjAAAAhcAPhCoCAABBjUQk/4nXD7buRTH/SIlEJAjB7xBFMfZFMdtAD7b/D7bKZg8fhAAAAAAARYXkdHxJi1UASWPHTI0MgkgDRCQISI1cggRmDx9EAABBixEPtsYp6EGJwEHB+B9EMcBEKcBBicCJ0A+20sH4EA+2wCn4QYnCQcH6H0Qx0EQp0EE5wEEPTcApykGJ0EHB+B9EMcJEKcI50A9MwjnwD57ASYPBBA+2wEEBw0w5y3WfQYPGAUUB50Q5dCQED4Vt////RInYSIPEGFteX11BXEFdQV5BX8NmDx+EAAAAAACJx4XAD4RFAQAARInjRYniZg9u4jHJwesCQY10JP9Bg+L8RTHJZg9vFQAAAABIweMERTHbZg9w3AAPH4AAAAAARYXkD4TqAAAATYtFAIP+Aw+G8gAAAEhjwWYP78lJjQSASI0sAw8fAPMPbwBIg8AQZg/bwmYPdsNmD/rISDnFdedmD2/BZg9z2AhmD/7IZg9vwWYPc9gEZg/+yGYPfshBAcNEidBFOdQPhIUAAACNLAFIY+1BiyyogeX///8AOdVAD5TFQA+27UEB641oAUE57H5gAc1IY+1BiyyogeX///8AOepAD5TFQA+27UEB641oAkE57H48Ac1IY+1BiyyogeX///8AOdVAD5TFg8ADQA+27UEB60Q54H0YAchImEGLBIAl////ADnQD5TAD7bAQQHDQYPBAUQB4UQ5zw+F/f7//+mb/v//McDpX////0Ux2+mM/v//kJCQkJCQkJCQ////AP///wD///8A////AA==")
		this._ScanPixelCountRegion := this.mcode("VVdWU4PsKItMJEyLdCREi1wkVItEJEABzotUJFCJdCQUid+FyXkMi0wkRIl0JESJTCQUi3QkSAHWiXQkEIXSeQyLVCRIiXQkSIlUJBCLTCREhckPiMsBAACLVCRIhdIPiL8BAACLdCQ8i0wkFA+3dgg5zo1W/4l0JBgPT9GJVCQUidWLVCQ8D7dSCjtUJBCNSv8PT0wkEIlMJBCE2w+E7QAAADlMJEgPjWsBAAAPr3QkSInCifvB6hAPttuJXCQIiXQkHIt0JETB5gKJdCQgjTStAAAAAIl0JCQPtvKJdCQED7b0D7bAiUQkDIk0JDH2i0QkFDlEJER9cItEJDyLXCQgiyiLRCQcweACAcMB6wNsJCQBxY12AIsTD7bOKwwkidAPttKJz8H4EMH/Hw+2wCtEJAQx+Sn5icfB/x8x+Cn4OcEPTMgrVCQMidfB/x8x+in6OdEPTdExwDtUJAgPnsCDwwQBxjnrda6LXCQYg0QkSAEBXCQci0QkEDtEJEgPhWv///+DxCiJ8FteX13DkDlMJEgPjX4AAACLdCREi3wkGA+vfCRIi2wkSMHmAok0JIt0JBTB5gKJdCQEMfZmkItcJBQ5XCREfTeLXCQ8ixQkiwuNHL0AAAAAAdoBygNMJAQBy410JgCLCoHh////ADnID5TBg8IED7bJAc4503Xng8UBA3wkGDlsJBB1soPEKInwW15fXcODxCgx9luJ8F5fXcO+/f///+lX////kJA=|QVdBVkFVQVRVV1ZTSIPsKIuEJKAAAAAPtvBEiYQkgAAAAESLhCSQAAAASYnNRIu0JIAAAACLjCSYAAAARQHGRYXAeRNEi4QkgAAAAESJtCSAAAAARYnGQo0cCYkcJIXJeQlEiclBidmJDCSLjCSAAAAAhckPiMcCAABFhckPiL4CAABBD7d9EIscJI1P/0Q594l8JARED07xQQ+3TRJEjUH/OdlED0/DRIkEJITAD4WcAQAARDsMJA+NewIAAEGJ+ESJ9yu8JIAAAACLnCSAAAAAifhBif+Nd/9mD28VAAAAAMHoAkGD5/xmD27iiXQkCEjB4ARFD6/BZg9w3ABEAftIiUQkEEhjhCSAAAAAg/4DD0acJIAAAABFMeRIiUQkGESNWwGNcwKNawMPH0QAAEQ5tCSAAAAAD43hAAAAg3wkCANNi1UAdl5Ii0wkEEljwEgDRCQYZg/vyUmNBIJIAcEPH4AAAAAA8w9vAEiDwBBmD9vCZg92w2YP+shIOch152YPb8FmD3PYCGYP/shmD2/BZg9z2ARmD/7IZg9+yEEBxEE5/3R4QY0EGEiYQYsEgiX///8AOdAPlMAPtsBBAcRFOd5+WUONBBhImEGLBIIl////ADnCD5TAD7bAQQHEQTn2fjpBjQQwSJhBiwSCJf///wA50A+UwA+2wEEBxEQ59X0bQo1EBQBImEGLBIIl////ADnCD5TAD7bAQQHEQYPBAUQDRCQERDkMJA+F/v7//0SJ4EiDxChbXl9dQVxBXUFeQV/DZi4PH4QAAAAAAEU5wQ+N4AAAAIuEJIAAAAAPtu5FMeQPtspBD6/5SGOcJIAAAAD30EQB8EiJXCQISAHYQYn/iddIiUQkEMHvEEAPtv8PH0QAAEQ5tCSAAAAAfX9Ii1wkCEmLVQBJY8dMjQQYSANEJBBOjRSCSI1cggRBixIPtsYp6EGJwEHB+B9EMcBEKcBBicCJ0A+20sH4EA+2wCn4QYnDQcH7H0Qx2EQp2EE5wEEPTcApykGJ0EHB+B9EMcJEKcI50A9MwjnwD57ASYPCBA+2wEEBxEw503WfQYPBAUQDfCQERDkMJA+FZP///+n5/v//RTHk6fH+//9BvP3////p5v7//5CQkJD///8A////AP///wD///8A")
		this._ScanPixelCountRadius := this.mcode("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")
		this._ScanPixelPosition := this.mcode("VVdWU4tUJBSLdCQci0wkGA+3QgiLfCQgi1wkJDnwD4aMAAAAD7dqCjn9D4aAAAAAD6/HixIB8L4BAAAAixSCidAl////ADnIdFkx9oTbdFOJzw+264nGD7bSwe8Qwf4QD7bEifsPtvsp/on3wf8fMf4p/g+2+Q+2zSn6idfB/x8x+in6OdYPTdYpyInBwfkfMcgpyDnCD03COcUPncAPtsCJxluJ8F5fXcONtgAAAAC+/v///+vskJCQkJCQkJCQ|D7dBEESLVCQoRDnAD4aeAAAARA+3WRJFOcsPhpAAAABED6/ISIsBRQHIQosMgEG4AQAAAInIJf///wA50HRoRTHARYTSdGBFD7bKQYnSQYnAD7bJQcHqEEHB+BAPtsRFD7bSRSnQRYnCQcH6H0Ux0EUp0EQPttIPttZEKdFBicpBwfofRDHRRCnRQTnIQQ9NyCnQmTHQKdA5wQ9MyEUxwEE5yUEPncBEicDDDx9EAABBuP7////r75CQkJCQkJCQ")

		this.tBufferPtr := tBufferPtr := this.SetVarCapacity("ttBuffer",4096,0)
		this.dataPtr := dataPtr := this.SetVarCapacity("_data",64,0)

		if (!this.desktop and !this.hwnd := winexist(title)) {
			msgbox % "Could not find window: " title "!`n`nScanner will not function!"
			return
		}
		if (!this.GetRect(gw,gh))
			return

		this.width := gw
		this.height := gh
		this.srcDC := DllCall("GetDCEx", "Ptr", (this.desktop ? 0 : this.hwnd),"Uint",0,"Uint",(this.UseClientArea ? 0 : 1))
		this.dstDC := DllCall("CreateCompatibleDC", "Ptr", 0)
		NumPut(tBufferPtr,dataPtr+0,(this.bits ? 8 : 4),"Ptr")
		this.CreateDIB()
	}


	;#########################################################################################################
	;Image
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found; 0 otherwise

	Image(image,variance=0,ByRef returnX=0,ByRef returnY=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImage,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}


	;#########################################################################################################
	;ImageRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w			    		:				Width of pixels to search, starting from x1
	;h		     			:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found in the specified region; 0 otherwise

	ImageRegion(image,x1,y1,w,h,variance=0,ByRef returnX=0,ByRef returnY=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImageRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"int",x1,"int",y1,"int",w,"int",h,"uchar",variance,"uchar",centerResults,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}


	;#########################################################################################################
	;ImageCount
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found; 0 otherwise

	ImageCount(image,variance=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCount,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;#########################################################################################################
	;ImageCountRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w		     			:				Width of pixels to search, starting from x1
	;h			     		:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found in the specified region; 0 otherwise

	ImageCountRegion(image,x1,y1,w,h,variance=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCountRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"int",x1,"int",y1,"int",w,"int",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;#########################################################################################################
	;ImageClosestToPoint
	;
	;image				:				Path to image file
	;pointX				:				x position of the point
	;pointY				:				y position of the point
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;centerResults	:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;		     							This also affects distance calculations for closest image
	;MaxRadius		:				Maximum circular radius to search in; lower values require images to be closer to the point
	;
	;return				;				Returns 1 if an image was found close enough to the point; 0 otherwise

	ImageClosestToPoint(image,pointX,pointY,variance=0,byref returnX=0,byref returnY=0,centerResults=1,maxRadius=9999) {
		if (!c := this.ImageArray(image,a,variance,centerResults))
			return 0
		min := maxRadius
		i := 0
		loop % c {
			xd := a[a_index].x - pointX
			yd := a[a_index].y - pointY
			dist := sqrt(xd*xd + yd*yd)
			if (dist < min) {
				min := dist
				i := a_index
			}
		}
		if (i = 0)
			return 0
		returnX := a[i].x
		returnY := a[i].y
		return 1
	}


	;#########################################################################################################
	;ImageArray
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults	:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found; 0 otherwise

	ImageArray(image,byref array,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArray,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}


	;#########################################################################################################
	;ImageArrayRegion
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w			     		:				Width of pixels to search, starting from x1
	;h				    	:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults	:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found in the specified region; 0 otherwise

	ImageArrayRegion(image,byref array,x1,y1,w,h,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArrayRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"int",x1,"int",y1,"int",w,"int",h,"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}


	;#########################################################################################################
	;Pixel
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if pixel was found; 0 otherwise

	Pixel(color,variance=0,ByRef returnX=0,ByRef returnY=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixel,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}


	;#########################################################################################################
	;PixelRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if a pixel inside the specified region was found; 0 otherwise

	PixelRegion(color,x1,y1,w,h,variance=0,byref returnX=0,byref returnY=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixelRegion,"Ptr",this.dataPtr,"Uint",color,"int",x1,"int",y1,"int",w,"int",h,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}


	;#########################################################################################################
	;PixelPosition
	;
	;color				:				Color of pixel to match at a given position(can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns 1 if the color matched at the specified position; 0 otherwise

	PixelPosition(color,pointX,pointY,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelPosition,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",variance,"int")
		return (c == 1 ? 1 : 0)
	}


	;#########################################################################################################
	;PixelCount
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels; 0 otherwise

	PixelCount(color,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCount,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;#########################################################################################################
	;PixelCountRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in the specified region; 0 otherwise

	PixelCountRegion(color,x1,y1,w,h,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRegion,"Ptr",this.dataPtr,"Uint",color,"int",x1,"int",y1,"int",w,"int",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}



	;#########################################################################################################
	;PixelCountRadius
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;radius				:				Radius to search in
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in a specified radius; 0 otherwise

	PixelCountRadius(color,pointX,pointY,radius,variance=0) {
		color &= 0xFFFFFF
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRadius,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",radius,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;#########################################################################################################
	;GetPixel
	;
	;pointX				:				X position
	;pointY				:				Y position
	;
	;return				;				Returns the pixel at the pointX,pointY location

	GetPixel(pointX,pointY) {
		if (this.AutoUpdate)
			this.Update()
		if (pointX < 0 or pointY < 0 or pointX >= this.width or pointY >= this.height) {
			msgbox % "Cannot get a pixel at position: " pointX "," pointY " as it lies outside of the source region!"
			return 0
		}
		return NumGet(this.temp0,(pointX+pointY*this.width)*4,"uint")
	}


	;#########################################################################################################
	;SaveImage
	;
	;name				:				Name to save to file to
	;
	;return				;				Saves the current pixel buffer to a png image

	SaveImage(name) {
		if (!InStr(name,".png"))
			name .= ".png"
		if (this.autoUpdate)
			this.Update()
		DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", "Ptr", this.hbm, "Ptr", 0, "Ptr*", bm)

		;largely borrowed from tic function, encoder stuff is a pain
		DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
		VarSetCapacity(ci, nSize)
		DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, "Ptr", &ci)
		if !(nCount && nSize) {
			msgbox % "Problem getting encoder information"
			return 0
		}
		Loop % nCount {
			sString := StrGet(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16") ;Thanks tic, this particularily confused me!
			if (InStr(sString, "*.PNG")) {
				pCodec := &ci+idx
				break
			}
		}
		if (!pCodec) {
			msgbox % "Problem finding png codec"
			return 0
		}
		DllCall("gdiplus\GdipSaveImageToFile", "Ptr", bm, "Ptr", &name, "Ptr", pCodec, "uint", 0)
	}


	;#########################################################################################################
	;Click
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application

	Click(pointX,pointY,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX% y%pointY%, %t%,,%button%,,NA
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			click,%pointX%,%pointY%,%button%
		}
		return 1
	}


	;#########################################################################################################
	;ClickDrag
	;
	;pointX1			:				X position to start click
	;pointY1			:				Y position to start click
	;pointX2			:				X position to end click
	;pointY2			:				Y position to end click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application

	ClickDrag(pointX1,pointY1,pointX2,pointY2,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX1% y%pointY1%, %t%,,%button%,,NA D
			sleep 10
			ControlClick, x%pointX2% y%pointY2%, %t%,,%button%,,NA U
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			MouseClickDrag,%button%,%pointX1%,%pointY1%,%pointX2%,%pointY2%
		}
		return 1
	}


	;#########################################################################################################
	;ClickRegion
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;w					:				Width of region
	;h					:				Height of region
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				Clicks randomly within the specified region

	ClickRegion(pointX,pointY,w,h,button:="left") {
		this.CheckRegion(pointX,pointY,w,h)
		pointX += this.Random(0,w)
		pointY += this.Random(0,h)
		return this.Click(pointX,pointY,button)
	}











	;##########################################
	;  internal functions used by the class
	;##########################################
	CheckRegion(byref x, byref y, byref w, byref h) {
		if (w < 0) {
			w := -w
			x -= w
		}
		if (h < 0) {
			h := -h
			y -= h
		}
	}
	CheckWindow() {
		if (this.desktop)
			return 1

		if (this.UseClientArea and !this.GetClientRect(w,h))
			return 0
		else if (!this.UseClientArea and !this.GetWindowRect(w,h))
			return 0

		if (w != this.width or h != this.height) {
			this.width := w
			this.height := h
			DllCall("DeleteObject","Ptr",this.hbm)
			this.CreateDIB()
		}
		return 1
	}
	CreateDIB() {
		VarSetCapacity(_scan,8)
		VarSetCapacity(bi,40,0)
		NumPut(this.width,bi,4,"int")
		NumPut(-this.height,bi,8,"int")
		NumPut(40,bi,0,"uint")
		NumPut(1,bi,12,"ushort")
		NumPut(32,bi,14,"ushort")
		this.hbm := DllCall("CreateDIBSection", "Ptr", this.dstDC, "Ptr", &bi, "uint", 0, "Ptr*", _scan, "Ptr", 0, "uint", 0, "Ptr")
		this.temp0 := _scan
		NumPut(_scan,this.dataPtr,0,"Ptr")
		NumPut((this.height<<16)+this.width,this.dataPtr,(this.bits ? 16 : 8),"uint")
		DllCall("SelectObject", "Ptr", this.dstDC, "Ptr", this.hbm)
	}
	SetVarCapacity(key,size,fill=0) {
		this.SetCapacity(key,size)
		DllCall("RtlFillMemory","Ptr",this.GetAddress(key),"Ptr",size,"uchar",fill)
		return this.GetAddress(key)
	}
	_Delete() {
		DllCall("gdiplus\GdiplusShutdown", "Ptr*", this.gdiplusToken)
	}
	CacheImage(image) {
		if (this.imageCache.haskey(image))
			return 1
		if (image = "") {
			msgbox % "Error, expected resource image path but empty variable was supplied!"
			return 0
		}
		if (!FileExist(image)) {
			msgbox % "Error finding resource image: '" image "' does not exist!"
			return 0
		}
		if (!A_IsUnicode) {
			VarSetCapacity(wchar, strlen(image)*2)
			DllCall("kernel32\MultiByteToWideChar", "uint", 0, "uint", 0, "Ptr", &image, "int", -1, "Ptr", &wchar, "int", strlen(image))
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &wchar, "Ptr*", bm)
		} else
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &image, "Ptr*", bm)
		DllCall("gdiplus\GdipGetImageWidth", "Ptr", bm, "Uint*", w)
		DllCall("gdiplus\GdipGetImageHeight", "Ptr", bm, "Uint*", h)
		VarSetCapacity(r,16)
		NumPut(x,r,0,"uint")
		NumPut(y,r,4,"uint")
		NumPut(w,r,8,"uint")
		NumPut(h,r,12,"uint")
		VarSetCapacity(bmdata, 32, 0)
		DllCall("Gdiplus\GdipBitmapLockBits", "Ptr", bm, "Ptr", &r, "uint", 3, "int", 0x26200A, "Ptr", &bmdata)
		scan := NumGet(bmdata, 16, "Ptr")
		p := DllCall("GlobalAlloc", "uint", 0x40, "ptr", 16+((w*h)*4), "ptr")
		NumPut((w<<16)+h,p+0,0,"uint")
		loop % ((w*h)*4)
			NumPut(NumGet(scan+0,a_index-1,"uchar"),p+0,a_index+7,"uchar")
		loop % (w*h)
			if (NumGet(scan+0,(a_index-1)*4,"uint") < 0xFF000000) {
				NumPut(1,p+4,"uint")
				break
			}
		DllCall("Gdiplus\GdipBitmapUnlockBits", "Ptr", bm, "Ptr", &bmdata)
		DllCall("gdiplus\GdipDisposeImage", "ptr", bm)
		this.ImageCache[image] := p
		return 1
	}
	Update() {
		if (this.CheckWindow())
			DllCall("gdi32\BitBlt", "Ptr", this.dstDC, "int", 0, "int", 0, "int", this.width, "int", this.height, "Ptr", this.srcDC, "int", 0, "int", 0, "uint", 0xCC0020)
	}
	GetRect(ByRef w, ByRef h) {
		if (this.desktop) {  ;only gets primary screen for now, I may add support for virtual later
			w := a_screenwidth
			h := a_screenheight
			return 1
		}
		if (this.UseClientArea) {
			if (!this.GetClientRect(w,h)) {
				msgbox % "Problem with Client rectangle dimensions, is window minimized?`n`nScanner will not function!"
				return 0
			}
		} else {
			if (!this.GetWindowRect(w,h)) {
				msgbox % "Problem with Window rectangle dimensions, is window minimized?`n`nScanner will not function!"
				return 0
			}
		}
		return 1
	}
	GetClientRect(byref w, byref h) {
		if (!DllCall("GetClientRect", "Ptr", this.hwnd, "Ptr", this.tBufferPtr))
			return 0
		w := NumGet(this.tBufferPtr,8,"int")
		h := NumGet(this.tBufferPtr,12,"int")
		if (w <= 0 or h <= 0)
			return 0
		return 1
	}
	GetWindowRect(byref w, byref h) {
		if (!DllCall("GetWindowRect", "Ptr", this.hwnd, "Ptr", this.tBufferPtr))
			return 0
		x := NumGet(this.tBufferPtr,0,"int")
		y := NumGet(this.tBufferPtr,4,"int")
		w := NumGet(this.tBufferPtr,8,"int") - x
		h := NumGet(this.tBufferPtr,12,"int") - y
		if (w <= 0 or h <= 0)
			return 0
		return 1
	}
	Random(min,max) {
		random,result,min,max
		return result
	}
	Mcode(str) {
		s := strsplit(str,"|")
		if (s.length() != 2)
			return
		if (!DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", 0, "uint*", pp, "ptr", 0, "ptr", 0))
			return
		p := DllCall("GlobalAlloc", "uint", 0, "ptr", pp, "ptr")
		if (this.bits)
			DllCall("VirtualProtect", "ptr", p, "ptr", pp, "uint", 0x40, "uint*", op)
		if (DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", p, "uint*", pp, "ptr", 0, "ptr", 0))
			return p
		DllCall("GlobalFree", "ptr", p)
	}
}
